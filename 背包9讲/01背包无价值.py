# 在n个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为m，每个物品的大小为A[i]

# 样例 :
#     输入:  [3,4,8,5], backpack size=10
#     输出:  9

# 解析：
#     动态规划二维dp
#     递推公式：    其中i => 0 ~ n， j => 0 ~ m+1
#     ：前i个物品放入容量为j的背包的最大重量；
#     ：放入第i个物品时的重量；
#     其中i-1为上一个物品， j-A[i] 表示当前容量j - 当前物品重量A[i] 时背包所能容纳物品的重量；

#     dp[i-1][j]：不放第i个时的重量；
#     动态规划一维dp
#     递推公式： j => m ~ A[i] 倒序，每个物品不重复计算
# #-----------------------------------------------------------------------------------------------------------------------

def backpack(m, A): 
    n = len(A)
    if n <= 0 or m <= 0:
        return 0

        
    dp = [0] * (m+1)
    # i: 0 ~ n
    for i in range(n):
        # j: m ~ A[i] - 1, 倒序, 每个物品用一次
        for j in range(m, A[i]-1, -1):
            dp[j] = max(dp[j-A[i]] + A[i], dp[j])
    return dp[-1]
 
if __name__ == '__main__':
    m = 10
    A = [3, 4, 8, 5]
    # 一维dp数组变化过程跟二维一样, 区别一维在原地更新
    print('一维dp ', backpack(m, A))